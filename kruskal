def add_edge(edges, u, v, w):
    edges.append((int(w), u, v))

def find_parent(parent, i):
    if parent[i] == i:
        return i
    parent[i] = find_parent(parent, parent[i])
    return parent[i]

def union(parent, rank, x, y):
    root_x = find_parent(parent, x)
    root_y = find_parent(parent, y)
    if rank[root_x] < rank[root_y]:
        parent[root_x] = root_y
    elif rank[root_x] > rank[root_y]:
        parent[root_y] = root_x
    else:
        parent[root_y] = root_x
        rank[root_x] += 1

def kruskal(vertices, edges):
    parent = {}
    rank = {}
    for v in vertices:
        parent[v] = v
        rank[v] = 0

    edges.sort()  # Sort edges based on weight
    mst = []

    for weight, u, v in edges:
        root_u = find_parent(parent, u)
        root_v = find_parent(parent, v)

        if root_u != root_v:
            mst.append((weight, u, v))
            union(parent, rank, root_u, root_v)

    return mst

n = int(input("No. of vertices: "))
vertices = []

print("Enter vertices: ")
for i in range(n):
    v = input()
    vertices.append(v)

edges = []

m = int(input("No. of edges: "))
print("Enter (from, to, weight): ")
for i in range(m):
    u, v, w = input().split()
    add_edge(edges, u, v, w)

mst = kruskal(vertices, edges)
print("Kruskal's MST:")
for weight, u, v in mst:
    print(f"Edge: {u} - {v} Weight: {weight}")
